{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport { isBoolean, isFunction, isNull, isNumber, isObject, isString, isUndefined, pathIsEmpty, pathToUrlEncodedString, ReferenceBase } from '@react-native-firebase/app/lib/common';\nimport DatabaseDataSnapshot from \"./DatabaseDataSnapshot\";\nimport DatabaseSyncTree from \"./DatabaseSyncTree\";\nvar eventTypes = ['value', 'child_added', 'child_changed', 'child_moved', 'child_removed'];\nvar DatabaseReference = null;\nexport function provideReferenceClass(databaseReference) {\n  DatabaseReference = databaseReference;\n}\nvar listeners = 0;\nvar DatabaseQuery = function (_ReferenceBase) {\n  _inherits(DatabaseQuery, _ReferenceBase);\n  var _super = _createSuper(DatabaseQuery);\n  function DatabaseQuery(database, path, modifiers) {\n    var _this;\n    _classCallCheck(this, DatabaseQuery);\n    _this = _super.call(this, path);\n    _this._database = database;\n    _this._modifiers = modifiers;\n    return _this;\n  }\n  _createClass(DatabaseQuery, [{\n    key: \"ref\",\n    get: function get() {\n      return new DatabaseReference(this._database, this.path);\n    }\n  }, {\n    key: \"endAt\",\n    value: function endAt(value, key) {\n      if (!isNumber(value) && !isString(value) && !isBoolean(value) && !isNull(value)) {\n        throw new Error(\"firebase.database().ref().endAt(*) 'value' must be a number, string, boolean or null value.\");\n      }\n      if (!isUndefined(key) && !isString(key)) {\n        throw new Error(\"firebase.database().ref().endAt(_, *) 'key' must be a string value if defined.\");\n      }\n      if (this._modifiers.hasEndAt()) {\n        throw new Error('firebase.database().ref().endAt() Ending point was already set (by another call to endAt or equalTo).');\n      }\n      var modifiers = this._modifiers._copy().endAt(value, key);\n      modifiers.validateModifiers('firebase.database().ref().endAt()');\n      return new DatabaseQuery(this._database, this.path, modifiers);\n    }\n  }, {\n    key: \"equalTo\",\n    value: function equalTo(value, key) {\n      if (!isNumber(value) && !isString(value) && !isBoolean(value) && !isNull(value)) {\n        throw new Error(\"firebase.database().ref().equalTo(*) 'value' must be a number, string, boolean or null value.\");\n      }\n      if (!isUndefined(key) && !isString(key)) {\n        throw new Error(\"firebase.database().ref().equalTo(_, *) 'key' must be a string value if defined.\");\n      }\n      if (this._modifiers.hasStartAt()) {\n        throw new Error('firebase.database().ref().equalTo() Starting point was already set (by another call to startAt or equalTo).');\n      }\n      if (this._modifiers.hasEndAt()) {\n        throw new Error('firebase.database().ref().equalTo() Ending point was already set (by another call to endAt or equalTo).');\n      }\n      return this.startAt(value, key).endAt(value, key);\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(other) {\n      if (!(other instanceof DatabaseQuery)) {\n        throw new Error(\"firebase.database().ref().isEqual(*) 'other' must be an instance of Query.\");\n      }\n      var sameApp = other._database.app === this._database.app;\n      var sameDatabasePath = other.toString() === this.toString();\n      var sameModifiers = other._modifiers.toString() === this._modifiers.toString();\n      return sameApp && sameDatabasePath && sameModifiers;\n    }\n  }, {\n    key: \"limitToFirst\",\n    value: function limitToFirst(limit) {\n      if (this._modifiers.isValidLimit(limit)) {\n        throw new Error(\"firebase.database().ref().limitToFirst(*) 'limit' must be a positive integer value.\");\n      }\n      if (this._modifiers.hasLimit()) {\n        throw new Error('firebase.database().ref().limitToFirst(*) Limit was already set (by another call to limitToFirst, or limitToLast)');\n      }\n      return new DatabaseQuery(this._database, this.path, this._modifiers._copy().limitToFirst(limit));\n    }\n  }, {\n    key: \"limitToLast\",\n    value: function limitToLast(limit) {\n      if (this._modifiers.isValidLimit(limit)) {\n        throw new Error(\"firebase.database().ref().limitToLast(*) 'limit' must be a positive integer value.\");\n      }\n      if (this._modifiers.hasLimit()) {\n        throw new Error('firebase.database().ref().limitToLast(*) Limit was already set (by another call to limitToFirst, or limitToLast)');\n      }\n      return new DatabaseQuery(this._database, this.path, this._modifiers._copy().limitToLast(limit));\n    }\n  }, {\n    key: \"off\",\n    value: function off(eventType, callback, context) {\n      if (arguments.length === 0) {\n        return DatabaseSyncTree.removeListenersForRegistrations(DatabaseSyncTree.getRegistrationsByPath(this.path));\n      }\n      if (!isUndefined(eventType) && !eventTypes.includes(eventType)) {\n        throw new Error(\"firebase.database().ref().off(*) 'eventType' must be one of \" + eventTypes.join(', ') + \".\");\n      }\n      if (!isUndefined(callback) && !isFunction(callback)) {\n        throw new Error(\"firebase.database().ref().off(_, *) 'callback' must be a function.\");\n      }\n      if (!isUndefined(context) && !isObject(context)) {\n        throw new Error(\"firebase.database().ref().off(_, _, *) 'context' must be an object.\");\n      }\n      if (eventType && callback) {\n        var registration = DatabaseSyncTree.getOneByPathEventListener(this.path, eventType, callback);\n        if (!registration) {\n          return [];\n        }\n        DatabaseSyncTree.removeListenersForRegistrations([registration + \"$cancelled\"]);\n        return DatabaseSyncTree.removeListenerRegistrations(callback, [registration]);\n      }\n      var registrations = DatabaseSyncTree.getRegistrationsByPathEvent(this.path, eventType);\n      DatabaseSyncTree.removeListenersForRegistrations(DatabaseSyncTree.getRegistrationsByPathEvent(this.path, eventType + \"$cancelled\"));\n      return DatabaseSyncTree.removeListenersForRegistrations(registrations);\n    }\n  }, {\n    key: \"on\",\n    value: function on(eventType, callback, cancelCallbackOrContext, context) {\n      if (!eventTypes.includes(eventType)) {\n        throw new Error(\"firebase.database().ref().on(*) 'eventType' must be one of \" + eventTypes.join(', ') + \".\");\n      }\n      if (!isFunction(callback)) {\n        throw new Error(\"firebase.database().ref().on(_, *) 'callback' must be a function.\");\n      }\n      if (!isUndefined(cancelCallbackOrContext) && !isFunction(cancelCallbackOrContext) && !isObject(cancelCallbackOrContext)) {\n        throw new Error(\"firebase.database().ref().on(_, _, *) 'cancelCallbackOrContext' must be a function or object.\");\n      }\n      if (!isUndefined(context) && !isObject(context)) {\n        throw new Error(\"firebase.database().ref().on(_, _, _, *) 'context' must be an object.\");\n      }\n      var queryKey = this._generateQueryKey();\n      var eventRegistrationKey = this._generateQueryEventKey(eventType);\n      var registrationCancellationKey = eventRegistrationKey + \"$cancelled\";\n      var _context = cancelCallbackOrContext && !isFunction(cancelCallbackOrContext) ? cancelCallbackOrContext : context;\n      DatabaseSyncTree.addRegistration({\n        eventType: eventType,\n        ref: this.ref,\n        path: this.path,\n        key: queryKey,\n        appName: this._database.app.name,\n        dbURL: this._database._customUrlOrRegion,\n        eventRegistrationKey: eventRegistrationKey,\n        listener: _context ? callback.bind(_context) : callback\n      });\n      if (cancelCallbackOrContext && isFunction(cancelCallbackOrContext)) {\n        DatabaseSyncTree.addRegistration({\n          ref: this.ref,\n          once: true,\n          path: this.path,\n          key: queryKey,\n          appName: this._database.app.name,\n          dbURL: this._database._customUrlOrRegion,\n          eventType: eventType + \"$cancelled\",\n          eventRegistrationKey: registrationCancellationKey,\n          listener: _context ? cancelCallbackOrContext.bind(_context) : cancelCallbackOrContext\n        });\n      }\n      this._database.native.on({\n        eventType: eventType,\n        path: this.path,\n        key: queryKey,\n        appName: this._database.app.name,\n        modifiers: this._modifiers.toArray(),\n        hasCancellationCallback: isFunction(cancelCallbackOrContext),\n        registration: {\n          eventRegistrationKey: eventRegistrationKey,\n          key: queryKey,\n          registrationCancellationKey: registrationCancellationKey\n        }\n      });\n      listeners += 1;\n      return callback;\n    }\n  }, {\n    key: \"once\",\n    value: function once(eventType, successCallBack, failureCallbackOrContext, context) {\n      var _this2 = this;\n      if (!eventTypes.includes(eventType)) {\n        throw new Error(\"firebase.database().ref().once(*) 'eventType' must be one of \" + eventTypes.join(', ') + \".\");\n      }\n      if (!isUndefined(successCallBack) && !isFunction(successCallBack)) {\n        throw new Error(\"firebase.database().ref().once(_, *) 'successCallBack' must be a function.\");\n      }\n      if (!isUndefined(failureCallbackOrContext) && !isObject(failureCallbackOrContext) && !isFunction(failureCallbackOrContext)) {\n        throw new Error(\"firebase.database().ref().once(_, _, *) 'failureCallbackOrContext' must be a function or context.\");\n      }\n      if (!isUndefined(context) && !isObject(context)) {\n        throw new Error(\"firebase.database().ref().once(_, _, _, *) 'context' must be a context object.\");\n      }\n      var modifiers = this._modifiers._copy().toArray();\n      return this._database.native.once(this.path, modifiers, eventType).then(function (result) {\n        var dataSnapshot;\n        var previousChildName;\n        if (eventType === 'value') {\n          dataSnapshot = new DatabaseDataSnapshot(_this2.ref, result);\n        } else {\n          dataSnapshot = new DatabaseDataSnapshot(_this2.ref, result.snapshot);\n          previousChildName = result.previousChildName;\n        }\n        if (isFunction(successCallBack)) {\n          if (isObject(failureCallbackOrContext)) {\n            successCallBack.bind(failureCallbackOrContext)(dataSnapshot, previousChildName);\n          } else if (isObject(context)) {\n            successCallBack.bind(context)(dataSnapshot, previousChildName);\n          } else {\n            successCallBack(dataSnapshot, previousChildName);\n          }\n        }\n        return dataSnapshot;\n      }).catch(function (error) {\n        if (isFunction(failureCallbackOrContext)) {\n          failureCallbackOrContext(error);\n        }\n        return Promise.reject(error);\n      });\n    }\n  }, {\n    key: \"orderByChild\",\n    value: function orderByChild(path) {\n      if (!isString(path)) {\n        throw new Error(\"firebase.database().ref().orderByChild(*) 'path' must be a string value.\");\n      }\n      if (pathIsEmpty(path)) {\n        throw new Error(\"firebase.database().ref().orderByChild(*) 'path' cannot be empty. Use orderByValue instead.\");\n      }\n      if (this._modifiers.hasOrderBy()) {\n        throw new Error(\"firebase.database().ref().orderByChild(*) You can't combine multiple orderBy calls.\");\n      }\n      var modifiers = this._modifiers._copy().orderByChild(path);\n      modifiers.validateModifiers('firebase.database().ref().orderByChild()');\n      return new DatabaseQuery(this._database, this.path, modifiers);\n    }\n  }, {\n    key: \"orderByKey\",\n    value: function orderByKey() {\n      if (this._modifiers.hasOrderBy()) {\n        throw new Error(\"firebase.database().ref().orderByKey() You can't combine multiple orderBy calls.\");\n      }\n      var modifiers = this._modifiers._copy().orderByKey();\n      modifiers.validateModifiers('firebase.database().ref().orderByKey()');\n      return new DatabaseQuery(this._database, this.path, modifiers);\n    }\n  }, {\n    key: \"orderByPriority\",\n    value: function orderByPriority() {\n      if (this._modifiers.hasOrderBy()) {\n        throw new Error(\"firebase.database().ref().orderByPriority() You can't combine multiple orderBy calls.\");\n      }\n      var modifiers = this._modifiers._copy().orderByPriority();\n      modifiers.validateModifiers('firebase.database().ref().orderByPriority()');\n      return new DatabaseQuery(this._database, this.path, modifiers);\n    }\n  }, {\n    key: \"orderByValue\",\n    value: function orderByValue() {\n      if (this._modifiers.hasOrderBy()) {\n        throw new Error(\"firebase.database().ref().orderByValue() You can't combine multiple orderBy calls.\");\n      }\n      var modifiers = this._modifiers._copy().orderByValue();\n      modifiers.validateModifiers('firebase.database().ref().orderByValue()');\n      return new DatabaseQuery(this._database, this.path, modifiers);\n    }\n  }, {\n    key: \"startAt\",\n    value: function startAt(value, key) {\n      if (!isNumber(value) && !isString(value) && !isBoolean(value) && !isNull(value)) {\n        throw new Error(\"firebase.database().ref().startAt(*) 'value' must be a number, string, boolean or null value.\");\n      }\n      if (!isUndefined(key) && !isString(key)) {\n        throw new Error(\"firebase.database().ref().startAt(_, *) 'key' must be a string value if defined.\");\n      }\n      if (this._modifiers.hasStartAt()) {\n        throw new Error('firebase.database().ref().startAt() Starting point was already set (by another call to startAt or equalTo).');\n      }\n      var modifiers = this._modifiers._copy().startAt(value, key);\n      modifiers.validateModifiers('firebase.database().ref().startAt()');\n      return new DatabaseQuery(this._database, this.path, modifiers);\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.toString();\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"\" + this._database._customUrlOrRegion + pathToUrlEncodedString(this.path);\n    }\n  }, {\n    key: \"keepSynced\",\n    value: function keepSynced(bool) {\n      if (!isBoolean(bool)) {\n        throw new Error(\"firebase.database().ref().keepSynced(*) 'bool' value must be a boolean value.\");\n      }\n      return this._database.native.keepSynced(this._generateQueryKey(), this.path, this._modifiers.toArray(), bool);\n    }\n  }, {\n    key: \"_generateQueryKey\",\n    value: function _generateQueryKey() {\n      return \"$\" + this._database._customUrlOrRegion + \"$/\" + this.path + \"$\" + this._database.app.name + \"$\" + this._modifiers.toString();\n    }\n  }, {\n    key: \"_generateQueryEventKey\",\n    value: function _generateQueryEventKey(eventType) {\n      return this._generateQueryKey() + \"$\" + listeners + \"$\" + eventType;\n    }\n  }]);\n  return DatabaseQuery;\n}(ReferenceBase);\nexport { DatabaseQuery as default };","map":{"version":3,"names":["isBoolean","isFunction","isNull","isNumber","isObject","isString","isUndefined","pathIsEmpty","pathToUrlEncodedString","ReferenceBase","DatabaseDataSnapshot","DatabaseSyncTree","eventTypes","DatabaseReference","provideReferenceClass","databaseReference","listeners","DatabaseQuery","_ReferenceBase","_inherits","_super","_createSuper","database","path","modifiers","_this","_classCallCheck","call","_database","_modifiers","_createClass","key","get","value","endAt","Error","hasEndAt","_copy","validateModifiers","equalTo","hasStartAt","startAt","isEqual","other","sameApp","app","sameDatabasePath","toString","sameModifiers","limitToFirst","limit","isValidLimit","hasLimit","limitToLast","off","eventType","callback","context","arguments","length","removeListenersForRegistrations","getRegistrationsByPath","includes","join","registration","getOneByPathEventListener","removeListenerRegistrations","registrations","getRegistrationsByPathEvent","on","cancelCallbackOrContext","queryKey","_generateQueryKey","eventRegistrationKey","_generateQueryEventKey","registrationCancellationKey","_context","addRegistration","ref","appName","name","dbURL","_customUrlOrRegion","listener","bind","once","native","toArray","hasCancellationCallback","successCallBack","failureCallbackOrContext","_this2","then","result","dataSnapshot","previousChildName","snapshot","catch","error","Promise","reject","orderByChild","hasOrderBy","orderByKey","orderByPriority","orderByValue","toJSON","keepSynced","bool","default"],"sources":["D:/food_ordering_app-ReactNative/node_modules/@react-native-firebase/database/lib/DatabaseQuery.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport {\n  isBoolean,\n  isFunction,\n  isNull,\n  isNumber,\n  isObject,\n  isString,\n  isUndefined,\n  pathIsEmpty,\n  pathToUrlEncodedString,\n  ReferenceBase,\n} from '@react-native-firebase/app/lib/common';\nimport DatabaseDataSnapshot from './DatabaseDataSnapshot';\nimport DatabaseSyncTree from './DatabaseSyncTree';\n\nconst eventTypes = ['value', 'child_added', 'child_changed', 'child_moved', 'child_removed'];\n\n// To avoid React Native require cycle warnings\nlet DatabaseReference = null;\nexport function provideReferenceClass(databaseReference) {\n  DatabaseReference = databaseReference;\n}\n\n// Internal listener count\nlet listeners = 0;\n\nexport default class DatabaseQuery extends ReferenceBase {\n  constructor(database, path, modifiers) {\n    super(path);\n    this._database = database;\n    this._modifiers = modifiers;\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.database.Query.html#endat\n   */\n  get ref() {\n    return new DatabaseReference(this._database, this.path);\n  }\n\n  /**\n   *\n   * @param value\n   * @param key\n   * @return {DatabaseQuery}\n   */\n  endAt(value, key) {\n    if (!isNumber(value) && !isString(value) && !isBoolean(value) && !isNull(value)) {\n      throw new Error(\n        \"firebase.database().ref().endAt(*) 'value' must be a number, string, boolean or null value.\",\n      );\n    }\n\n    if (!isUndefined(key) && !isString(key)) {\n      throw new Error(\n        \"firebase.database().ref().endAt(_, *) 'key' must be a string value if defined.\",\n      );\n    }\n\n    if (this._modifiers.hasEndAt()) {\n      throw new Error(\n        'firebase.database().ref().endAt() Ending point was already set (by another call to endAt or equalTo).',\n      );\n    }\n\n    const modifiers = this._modifiers._copy().endAt(value, key);\n    modifiers.validateModifiers('firebase.database().ref().endAt()');\n\n    return new DatabaseQuery(this._database, this.path, modifiers);\n  }\n\n  /**\n   *\n   * @param value\n   * @param key\n   * @return {DatabaseQuery}\n   */\n  equalTo(value, key) {\n    if (!isNumber(value) && !isString(value) && !isBoolean(value) && !isNull(value)) {\n      throw new Error(\n        \"firebase.database().ref().equalTo(*) 'value' must be a number, string, boolean or null value.\",\n      );\n    }\n\n    if (!isUndefined(key) && !isString(key)) {\n      throw new Error(\n        \"firebase.database().ref().equalTo(_, *) 'key' must be a string value if defined.\",\n      );\n    }\n\n    if (this._modifiers.hasStartAt()) {\n      throw new Error(\n        'firebase.database().ref().equalTo() Starting point was already set (by another call to startAt or equalTo).',\n      );\n    }\n\n    if (this._modifiers.hasEndAt()) {\n      throw new Error(\n        'firebase.database().ref().equalTo() Ending point was already set (by another call to endAt or equalTo).',\n      );\n    }\n\n    return this.startAt(value, key).endAt(value, key);\n  }\n\n  /**\n   *\n   * @param other\n   * @return {boolean}\n   */\n  isEqual(other) {\n    if (!(other instanceof DatabaseQuery)) {\n      throw new Error(\"firebase.database().ref().isEqual(*) 'other' must be an instance of Query.\");\n    }\n\n    const sameApp = other._database.app === this._database.app;\n    const sameDatabasePath = other.toString() === this.toString();\n    const sameModifiers = other._modifiers.toString() === this._modifiers.toString();\n\n    return sameApp && sameDatabasePath && sameModifiers;\n  }\n\n  /**\n   *\n   * @param limit\n   * @return {DatabaseQuery}\n   */\n  limitToFirst(limit) {\n    if (this._modifiers.isValidLimit(limit)) {\n      throw new Error(\n        \"firebase.database().ref().limitToFirst(*) 'limit' must be a positive integer value.\",\n      );\n    }\n\n    if (this._modifiers.hasLimit()) {\n      throw new Error(\n        'firebase.database().ref().limitToFirst(*) Limit was already set (by another call to limitToFirst, or limitToLast)',\n      );\n    }\n\n    return new DatabaseQuery(\n      this._database,\n      this.path,\n      this._modifiers._copy().limitToFirst(limit),\n    );\n  }\n\n  /**\n   *\n   * @param limit\n   * @return {DatabaseQuery}\n   */\n  limitToLast(limit) {\n    if (this._modifiers.isValidLimit(limit)) {\n      throw new Error(\n        \"firebase.database().ref().limitToLast(*) 'limit' must be a positive integer value.\",\n      );\n    }\n\n    if (this._modifiers.hasLimit()) {\n      throw new Error(\n        'firebase.database().ref().limitToLast(*) Limit was already set (by another call to limitToFirst, or limitToLast)',\n      );\n    }\n\n    return new DatabaseQuery(this._database, this.path, this._modifiers._copy().limitToLast(limit));\n  }\n\n  /**\n   *\n   * @param eventType\n   * @param callback\n   * @param context\n   * @return {DatabaseQuery}\n   */\n  off(eventType, callback, context) {\n    //\n    if (arguments.length === 0) {\n      // Firebase Docs:\n      //    if no eventType or callback is specified, all callbacks for the Reference will be removed\n      return DatabaseSyncTree.removeListenersForRegistrations(\n        DatabaseSyncTree.getRegistrationsByPath(this.path),\n      );\n    }\n\n    if (!isUndefined(eventType) && !eventTypes.includes(eventType)) {\n      throw new Error(\n        `firebase.database().ref().off(*) 'eventType' must be one of ${eventTypes.join(', ')}.`,\n      );\n    }\n\n    if (!isUndefined(callback) && !isFunction(callback)) {\n      throw new Error(\"firebase.database().ref().off(_, *) 'callback' must be a function.\");\n    }\n\n    if (!isUndefined(context) && !isObject(context)) {\n      throw new Error(\"firebase.database().ref().off(_, _, *) 'context' must be an object.\");\n    }\n\n    // Firebase Docs:\n    //     Note that if on() was called\n    //     multiple times with the same eventType and callback, the callback will be called\n    //     multiple times for each event, and off() must be called multiple times to\n    //     remove the callback.\n\n    // Remove only a single registration\n    if (eventType && callback) {\n      const registration = DatabaseSyncTree.getOneByPathEventListener(\n        this.path,\n        eventType,\n        callback,\n      );\n      if (!registration) {\n        return [];\n      }\n\n      // remove the paired cancellation registration if any exist\n      DatabaseSyncTree.removeListenersForRegistrations([`${registration}$cancelled`]);\n\n      // remove only the first registration to match firebase web sdk\n      // call multiple times to remove multiple registrations\n      return DatabaseSyncTree.removeListenerRegistrations(callback, [registration]);\n    }\n\n    // Firebase Docs:\n    //     If a callback is not specified, all callbacks for the specified eventType will be removed.\n    const registrations = DatabaseSyncTree.getRegistrationsByPathEvent(this.path, eventType);\n\n    DatabaseSyncTree.removeListenersForRegistrations(\n      DatabaseSyncTree.getRegistrationsByPathEvent(this.path, `${eventType}$cancelled`),\n    );\n\n    return DatabaseSyncTree.removeListenersForRegistrations(registrations);\n  }\n\n  /**\n   *\n   * @param eventType\n   * @param callback\n   * @param cancelCallbackOrContext\n   * @param context\n   * @return {DatabaseQuery}\n   */\n  on(eventType, callback, cancelCallbackOrContext, context) {\n    if (!eventTypes.includes(eventType)) {\n      throw new Error(\n        `firebase.database().ref().on(*) 'eventType' must be one of ${eventTypes.join(', ')}.`,\n      );\n    }\n\n    if (!isFunction(callback)) {\n      throw new Error(\"firebase.database().ref().on(_, *) 'callback' must be a function.\");\n    }\n\n    if (\n      !isUndefined(cancelCallbackOrContext) &&\n      !isFunction(cancelCallbackOrContext) &&\n      !isObject(cancelCallbackOrContext)\n    ) {\n      throw new Error(\n        \"firebase.database().ref().on(_, _, *) 'cancelCallbackOrContext' must be a function or object.\",\n      );\n    }\n\n    if (!isUndefined(context) && !isObject(context)) {\n      throw new Error(\"firebase.database().ref().on(_, _, _, *) 'context' must be an object.\");\n    }\n\n    const queryKey = this._generateQueryKey();\n    const eventRegistrationKey = this._generateQueryEventKey(eventType);\n    const registrationCancellationKey = `${eventRegistrationKey}$cancelled`;\n    const _context =\n      cancelCallbackOrContext && !isFunction(cancelCallbackOrContext)\n        ? cancelCallbackOrContext\n        : context;\n\n    // Add a new SyncTree registration\n    DatabaseSyncTree.addRegistration({\n      eventType,\n      ref: this.ref,\n      path: this.path,\n      key: queryKey,\n      appName: this._database.app.name,\n      dbURL: this._database._customUrlOrRegion,\n      eventRegistrationKey,\n      listener: _context ? callback.bind(_context) : callback,\n    });\n\n    if (cancelCallbackOrContext && isFunction(cancelCallbackOrContext)) {\n      // cancellations have their own separate registration\n      // as these are one off events, and they're not guaranteed\n      // to occur either, only happens on failure to register on native\n\n      DatabaseSyncTree.addRegistration({\n        ref: this.ref,\n        once: true,\n        path: this.path,\n        key: queryKey,\n        appName: this._database.app.name,\n        dbURL: this._database._customUrlOrRegion,\n        eventType: `${eventType}$cancelled`,\n        eventRegistrationKey: registrationCancellationKey,\n        listener: _context ? cancelCallbackOrContext.bind(_context) : cancelCallbackOrContext,\n      });\n    }\n\n    this._database.native.on({\n      eventType,\n      path: this.path,\n      key: queryKey,\n      appName: this._database.app.name,\n      modifiers: this._modifiers.toArray(),\n      hasCancellationCallback: isFunction(cancelCallbackOrContext),\n      registration: {\n        eventRegistrationKey,\n        key: queryKey,\n        registrationCancellationKey,\n      },\n    });\n\n    // increment number of listeners - just a short way of making\n    // every registration unique per .on() call\n    listeners += 1;\n\n    return callback;\n  }\n\n  /**\n   * @param eventType\n   * @param successCallBack\n   * @param failureCallbackOrContext\n   * @param context\n   */\n  once(eventType, successCallBack, failureCallbackOrContext, context) {\n    if (!eventTypes.includes(eventType)) {\n      throw new Error(\n        `firebase.database().ref().once(*) 'eventType' must be one of ${eventTypes.join(', ')}.`,\n      );\n    }\n\n    if (!isUndefined(successCallBack) && !isFunction(successCallBack)) {\n      throw new Error(\"firebase.database().ref().once(_, *) 'successCallBack' must be a function.\");\n    }\n\n    if (\n      !isUndefined(failureCallbackOrContext) &&\n      !isObject(failureCallbackOrContext) &&\n      !isFunction(failureCallbackOrContext)\n    ) {\n      throw new Error(\n        \"firebase.database().ref().once(_, _, *) 'failureCallbackOrContext' must be a function or context.\",\n      );\n    }\n\n    if (!isUndefined(context) && !isObject(context)) {\n      throw new Error(\n        \"firebase.database().ref().once(_, _, _, *) 'context' must be a context object.\",\n      );\n    }\n\n    const modifiers = this._modifiers._copy().toArray();\n\n    return this._database.native\n      .once(this.path, modifiers, eventType)\n      .then(result => {\n        let dataSnapshot;\n        let previousChildName;\n\n        // Child based events return a previousChildName\n        if (eventType === 'value') {\n          dataSnapshot = new DatabaseDataSnapshot(this.ref, result);\n        } else {\n          dataSnapshot = new DatabaseDataSnapshot(this.ref, result.snapshot);\n          previousChildName = result.previousChildName;\n        }\n\n        if (isFunction(successCallBack)) {\n          if (isObject(failureCallbackOrContext)) {\n            successCallBack.bind(failureCallbackOrContext)(dataSnapshot, previousChildName);\n          } else if (isObject(context)) {\n            successCallBack.bind(context)(dataSnapshot, previousChildName);\n          } else {\n            successCallBack(dataSnapshot, previousChildName);\n          }\n        }\n\n        return dataSnapshot;\n      })\n      .catch(error => {\n        if (isFunction(failureCallbackOrContext)) {\n          failureCallbackOrContext(error);\n        }\n        return Promise.reject(error);\n      });\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.database.Query.html#orderbychild\n   */\n  orderByChild(path) {\n    if (!isString(path)) {\n      throw new Error(\"firebase.database().ref().orderByChild(*) 'path' must be a string value.\");\n    }\n\n    if (pathIsEmpty(path)) {\n      throw new Error(\n        \"firebase.database().ref().orderByChild(*) 'path' cannot be empty. Use orderByValue instead.\",\n      );\n    }\n\n    if (this._modifiers.hasOrderBy()) {\n      throw new Error(\n        \"firebase.database().ref().orderByChild(*) You can't combine multiple orderBy calls.\",\n      );\n    }\n\n    const modifiers = this._modifiers._copy().orderByChild(path);\n    modifiers.validateModifiers('firebase.database().ref().orderByChild()');\n\n    return new DatabaseQuery(this._database, this.path, modifiers);\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.database.Query.html#orderbykey\n   */\n  orderByKey() {\n    if (this._modifiers.hasOrderBy()) {\n      throw new Error(\n        \"firebase.database().ref().orderByKey() You can't combine multiple orderBy calls.\",\n      );\n    }\n\n    const modifiers = this._modifiers._copy().orderByKey();\n    modifiers.validateModifiers('firebase.database().ref().orderByKey()');\n\n    return new DatabaseQuery(this._database, this.path, modifiers);\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.database.Query.html#orderbypriority\n   */\n  orderByPriority() {\n    if (this._modifiers.hasOrderBy()) {\n      throw new Error(\n        \"firebase.database().ref().orderByPriority() You can't combine multiple orderBy calls.\",\n      );\n    }\n\n    const modifiers = this._modifiers._copy().orderByPriority();\n    modifiers.validateModifiers('firebase.database().ref().orderByPriority()');\n\n    return new DatabaseQuery(this._database, this.path, modifiers);\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.database.Query.html#orderbyvalue\n   */\n  orderByValue() {\n    if (this._modifiers.hasOrderBy()) {\n      throw new Error(\n        \"firebase.database().ref().orderByValue() You can't combine multiple orderBy calls.\",\n      );\n    }\n\n    const modifiers = this._modifiers._copy().orderByValue();\n    modifiers.validateModifiers('firebase.database().ref().orderByValue()');\n\n    return new DatabaseQuery(this._database, this.path, modifiers);\n  }\n\n  startAt(value, key) {\n    if (!isNumber(value) && !isString(value) && !isBoolean(value) && !isNull(value)) {\n      throw new Error(\n        \"firebase.database().ref().startAt(*) 'value' must be a number, string, boolean or null value.\",\n      );\n    }\n\n    if (!isUndefined(key) && !isString(key)) {\n      throw new Error(\n        \"firebase.database().ref().startAt(_, *) 'key' must be a string value if defined.\",\n      );\n    }\n\n    if (this._modifiers.hasStartAt()) {\n      throw new Error(\n        'firebase.database().ref().startAt() Starting point was already set (by another call to startAt or equalTo).',\n      );\n    }\n\n    const modifiers = this._modifiers._copy().startAt(value, key);\n    modifiers.validateModifiers('firebase.database().ref().startAt()');\n\n    return new DatabaseQuery(this._database, this.path, modifiers);\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n\n  toString() {\n    return `${this._database._customUrlOrRegion}${pathToUrlEncodedString(this.path)}`;\n  }\n\n  keepSynced(bool) {\n    if (!isBoolean(bool)) {\n      throw new Error(\n        \"firebase.database().ref().keepSynced(*) 'bool' value must be a boolean value.\",\n      );\n    }\n\n    return this._database.native.keepSynced(\n      this._generateQueryKey(),\n      this.path,\n      this._modifiers.toArray(),\n      bool,\n    );\n  }\n\n  // Generates a unique string for a query\n  // Ensures any queries called in various orders keep the same key\n  _generateQueryKey() {\n    return `$${this._database._customUrlOrRegion}$/${this.path}$${\n      this._database.app.name\n    }$${this._modifiers.toString()}`;\n  }\n\n  // Generates a unique event registration key\n  _generateQueryEventKey(eventType) {\n    return `${this._generateQueryKey()}$${listeners}$${eventType}`;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}