{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport { generateDatabaseId, isBoolean, isFunction, isNull, isNumber, isObject, isString, isUndefined, isValidPath, pathChild, pathParent, promiseWithOptionalCallback } from '@react-native-firebase/app/lib/common';\nimport DatabaseDataSnapshot from \"./DatabaseDataSnapshot\";\nimport DatabaseOnDisconnect from \"./DatabaseOnDisconnect\";\nimport DatabaseQuery, { provideReferenceClass as provideReferenceClassForQuery } from \"./DatabaseQuery\";\nimport DatabaseQueryModifiers from \"./DatabaseQueryModifiers\";\nimport DatabaseThenableReference, { provideReferenceClass as provideReferenceClassForThenable } from \"./DatabaseThenableReference\";\nvar internalRefs = ['.info/connected', '.info/serverTimeOffset'];\nvar DatabaseReference = function (_DatabaseQuery) {\n  _inherits(DatabaseReference, _DatabaseQuery);\n  var _super = _createSuper(DatabaseReference);\n  function DatabaseReference(database, path) {\n    var _this;\n    _classCallCheck(this, DatabaseReference);\n    if (!internalRefs.includes(path) && !isValidPath(path)) {\n      throw new Error('firebase.database() Paths must be non-empty strings and can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\n    }\n    _this = _super.call(this, database, path, new DatabaseQueryModifiers());\n    _this._database = database;\n    return _this;\n  }\n  _createClass(DatabaseReference, [{\n    key: \"parent\",\n    get: function get() {\n      var parentPath = pathParent(this.path);\n      if (parentPath === null) {\n        return null;\n      }\n      return new DatabaseReference(this._database, parentPath);\n    }\n  }, {\n    key: \"root\",\n    get: function get() {\n      return new DatabaseReference(this._database, '/');\n    }\n  }, {\n    key: \"child\",\n    value: function child(path) {\n      if (!isString(path)) {\n        throw new Error(\"firebase.database().ref().child(*) 'path' must be a string value.\");\n      }\n      return new DatabaseReference(this._database, pathChild(this.path, path));\n    }\n  }, {\n    key: \"set\",\n    value: function set(value, onComplete) {\n      if (isUndefined(value)) {\n        throw new Error(\"firebase.database().ref().set(*) 'value' must be defined.\");\n      }\n      if (!isUndefined(onComplete) && !isFunction(onComplete)) {\n        throw new Error(\"firebase.database().ref().set(_, *) 'onComplete' must be a function if provided.\");\n      }\n      return promiseWithOptionalCallback(this._database.native.set(this.path, {\n        value: value\n      }), onComplete);\n    }\n  }, {\n    key: \"update\",\n    value: function update(values, onComplete) {\n      if (!isObject(values)) {\n        throw new Error(\"firebase.database().ref().update(*) 'values' must be an object.\");\n      }\n      var keys = Object.keys(values);\n      for (var i = 0; i < keys.length; i++) {\n        if (!isValidPath(keys[i])) {\n          throw new Error('firebase.database().update(*) \\'values\\' contains an invalid path. Paths must be non-empty strings and can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\n        }\n      }\n      if (!isUndefined(onComplete) && !isFunction(onComplete)) {\n        throw new Error(\"firebase.database().ref().update(_, *) 'onComplete' must be a function if provided.\");\n      }\n      return promiseWithOptionalCallback(this._database.native.update(this.path, {\n        values: values\n      }), onComplete);\n    }\n  }, {\n    key: \"setWithPriority\",\n    value: function setWithPriority(newVal, newPriority, onComplete) {\n      if (isUndefined(newVal)) {\n        throw new Error(\"firebase.database().ref().setWithPriority(*) 'newVal' must be defined.\");\n      }\n      if (!isNumber(newPriority) && !isString(newPriority) && !isNull(newPriority)) {\n        throw new Error(\"firebase.database().ref().setWithPriority(_, *) 'newPriority' must be a number, string or null value.\");\n      }\n      if (!isUndefined(onComplete) && !isFunction(onComplete)) {\n        throw new Error(\"firebase.database().ref().setWithPriority(_, _, *) 'onComplete' must be a function if provided.\");\n      }\n      return promiseWithOptionalCallback(this._database.native.setWithPriority(this.path, {\n        value: newVal,\n        priority: newPriority\n      }), onComplete);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(onComplete) {\n      if (!isUndefined(onComplete) && !isFunction(onComplete)) {\n        throw new Error(\"firebase.database().ref().remove(*) 'onComplete' must be a function if provided.\");\n      }\n      return promiseWithOptionalCallback(this._database.native.remove(this.path), onComplete);\n    }\n  }, {\n    key: \"transaction\",\n    value: function transaction(transactionUpdate, onComplete, applyLocally) {\n      var _this2 = this;\n      if (!isFunction(transactionUpdate)) {\n        throw new Error(\"firebase.database().ref().transaction(*) 'transactionUpdate' must be a function.\");\n      }\n      if (!isUndefined(onComplete) && !isFunction(onComplete)) {\n        throw new Error(\"firebase.database().ref().transaction(_, *) 'onComplete' must be a function if provided.\");\n      }\n      if (!isUndefined(applyLocally) && !isBoolean(applyLocally)) {\n        throw new Error(\"firebase.database().ref().transaction(_, _, *) 'applyLocally' must be a boolean value if provided.\");\n      }\n      return new Promise(function (resolve, reject) {\n        var onCompleteWrapper = function onCompleteWrapper(error, committed, snapshotData) {\n          if (isFunction(onComplete)) {\n            if (error) {\n              onComplete(error, committed, null);\n            } else {\n              onComplete(null, committed, new DatabaseDataSnapshot(_this2, snapshotData));\n            }\n          }\n          if (error) {\n            return reject(error);\n          }\n          return resolve({\n            committed: committed,\n            snapshot: new DatabaseDataSnapshot(_this2, snapshotData)\n          });\n        };\n        _this2._database._transaction.add(_this2, transactionUpdate, onCompleteWrapper, applyLocally);\n      });\n    }\n  }, {\n    key: \"setPriority\",\n    value: function setPriority(priority, onComplete) {\n      if (!isNumber(priority) && !isString(priority) && !isNull(priority)) {\n        throw new Error(\"firebase.database().ref().setPriority(*) 'priority' must be a number, string or null value.\");\n      }\n      if (!isUndefined(onComplete) && !isFunction(onComplete)) {\n        throw new Error(\"firebase.database().ref().setPriority(_, *) 'onComplete' must be a function if provided.\");\n      }\n      return promiseWithOptionalCallback(this._database.native.setPriority(this.path, {\n        priority: priority\n      }), onComplete);\n    }\n  }, {\n    key: \"push\",\n    value: function push(value, onComplete) {\n      if (!isUndefined(onComplete) && !isFunction(onComplete)) {\n        throw new Error(\"firebase.database().ref().push(_, *) 'onComplete' must be a function if provided.\");\n      }\n      var id = generateDatabaseId(this._database._serverTimeOffset);\n      if (isUndefined(value) || isNull(value)) {\n        return new DatabaseThenableReference(this._database, pathChild(this.path, id), Promise.resolve(this.child(id)));\n      }\n      var pushRef = this.child(id);\n      var promise = pushRef.set(value, onComplete).then(function () {\n        return pushRef;\n      });\n      if (onComplete) {\n        promise.catch(function () {});\n      }\n      return new DatabaseThenableReference(this._database, pathChild(this.path, id), promise);\n    }\n  }, {\n    key: \"onDisconnect\",\n    value: function onDisconnect() {\n      return new DatabaseOnDisconnect(this);\n    }\n  }]);\n  return DatabaseReference;\n}(DatabaseQuery);\nexport { DatabaseReference as default };\nprovideReferenceClassForQuery(DatabaseReference);\nprovideReferenceClassForThenable(DatabaseReference);","map":{"version":3,"names":["generateDatabaseId","isBoolean","isFunction","isNull","isNumber","isObject","isString","isUndefined","isValidPath","pathChild","pathParent","promiseWithOptionalCallback","DatabaseDataSnapshot","DatabaseOnDisconnect","DatabaseQuery","provideReferenceClass","provideReferenceClassForQuery","DatabaseQueryModifiers","DatabaseThenableReference","provideReferenceClassForThenable","internalRefs","DatabaseReference","_DatabaseQuery","_inherits","_super","_createSuper","database","path","_this","_classCallCheck","includes","Error","call","_database","_createClass","key","get","parentPath","value","child","set","onComplete","native","update","values","keys","Object","i","length","setWithPriority","newVal","newPriority","priority","remove","transaction","transactionUpdate","applyLocally","_this2","Promise","resolve","reject","onCompleteWrapper","error","committed","snapshotData","snapshot","_transaction","add","setPriority","push","id","_serverTimeOffset","pushRef","promise","then","catch","onDisconnect","default"],"sources":["D:/food_ordering_app-ReactNative/node_modules/@react-native-firebase/database/lib/DatabaseReference.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport {\n  generateDatabaseId,\n  isBoolean,\n  isFunction,\n  isNull,\n  isNumber,\n  isObject,\n  isString,\n  isUndefined,\n  isValidPath,\n  pathChild,\n  pathParent,\n  promiseWithOptionalCallback,\n} from '@react-native-firebase/app/lib/common';\nimport DatabaseDataSnapshot from './DatabaseDataSnapshot';\nimport DatabaseOnDisconnect from './DatabaseOnDisconnect';\nimport DatabaseQuery, {\n  provideReferenceClass as provideReferenceClassForQuery,\n} from './DatabaseQuery';\nimport DatabaseQueryModifiers from './DatabaseQueryModifiers';\nimport DatabaseThenableReference, {\n  provideReferenceClass as provideReferenceClassForThenable,\n} from './DatabaseThenableReference';\n\nconst internalRefs = ['.info/connected', '.info/serverTimeOffset'];\n\nexport default class DatabaseReference extends DatabaseQuery {\n  constructor(database, path) {\n    // Validate the reference path\n    if (!internalRefs.includes(path) && !isValidPath(path)) {\n      throw new Error(\n        'firebase.database() Paths must be non-empty strings and can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"',\n      );\n    }\n\n    super(database, path, new DatabaseQueryModifiers());\n    this._database = database;\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.database.Reference.html#parent\n   */\n  get parent() {\n    const parentPath = pathParent(this.path);\n    if (parentPath === null) {\n      return null;\n    }\n    return new DatabaseReference(this._database, parentPath);\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.database.Reference.html#root\n   */\n  get root() {\n    return new DatabaseReference(this._database, '/');\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.database.Reference.html#child\n   * @param path\n   */\n  child(path) {\n    if (!isString(path)) {\n      throw new Error(\"firebase.database().ref().child(*) 'path' must be a string value.\");\n    }\n    return new DatabaseReference(this._database, pathChild(this.path, path));\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.database.Reference.html#set\n   * @param value\n   * @param onComplete\n   */\n  set(value, onComplete) {\n    if (isUndefined(value)) {\n      throw new Error(\"firebase.database().ref().set(*) 'value' must be defined.\");\n    }\n\n    if (!isUndefined(onComplete) && !isFunction(onComplete)) {\n      throw new Error(\n        \"firebase.database().ref().set(_, *) 'onComplete' must be a function if provided.\",\n      );\n    }\n\n    return promiseWithOptionalCallback(this._database.native.set(this.path, { value }), onComplete);\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.database.Reference.html#update\n   * @param values\n   * @param onComplete\n   */\n  update(values, onComplete) {\n    if (!isObject(values)) {\n      throw new Error(\"firebase.database().ref().update(*) 'values' must be an object.\");\n    }\n\n    const keys = Object.keys(values);\n    for (let i = 0; i < keys.length; i++) {\n      if (!isValidPath(keys[i])) {\n        throw new Error(\n          'firebase.database().update(*) \\'values\\' contains an invalid path. Paths must be non-empty strings and can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"',\n        );\n      }\n    }\n\n    if (!isUndefined(onComplete) && !isFunction(onComplete)) {\n      throw new Error(\n        \"firebase.database().ref().update(_, *) 'onComplete' must be a function if provided.\",\n      );\n    }\n\n    return promiseWithOptionalCallback(\n      this._database.native.update(this.path, { values }),\n      onComplete,\n    );\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.database.Reference#setwithpriority\n   * @param newVal\n   * @param newPriority\n   * @param onComplete\n   */\n  setWithPriority(newVal, newPriority, onComplete) {\n    if (isUndefined(newVal)) {\n      throw new Error(\"firebase.database().ref().setWithPriority(*) 'newVal' must be defined.\");\n    }\n\n    if (!isNumber(newPriority) && !isString(newPriority) && !isNull(newPriority)) {\n      throw new Error(\n        \"firebase.database().ref().setWithPriority(_, *) 'newPriority' must be a number, string or null value.\",\n      );\n    }\n\n    if (!isUndefined(onComplete) && !isFunction(onComplete)) {\n      throw new Error(\n        \"firebase.database().ref().setWithPriority(_, _, *) 'onComplete' must be a function if provided.\",\n      );\n    }\n\n    return promiseWithOptionalCallback(\n      this._database.native.setWithPriority(this.path, {\n        value: newVal,\n        priority: newPriority,\n      }),\n      onComplete,\n    );\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.database.Reference#remove\n   * @param onComplete\n   */\n  remove(onComplete) {\n    if (!isUndefined(onComplete) && !isFunction(onComplete)) {\n      throw new Error(\n        \"firebase.database().ref().remove(*) 'onComplete' must be a function if provided.\",\n      );\n    }\n\n    return promiseWithOptionalCallback(this._database.native.remove(this.path), onComplete);\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.database.Reference#transaction\n   * @param transactionUpdate\n   * @param onComplete\n   * @param applyLocally\n   */\n  transaction(transactionUpdate, onComplete, applyLocally) {\n    if (!isFunction(transactionUpdate)) {\n      throw new Error(\n        \"firebase.database().ref().transaction(*) 'transactionUpdate' must be a function.\",\n      );\n    }\n\n    if (!isUndefined(onComplete) && !isFunction(onComplete)) {\n      throw new Error(\n        \"firebase.database().ref().transaction(_, *) 'onComplete' must be a function if provided.\",\n      );\n    }\n\n    if (!isUndefined(applyLocally) && !isBoolean(applyLocally)) {\n      throw new Error(\n        \"firebase.database().ref().transaction(_, _, *) 'applyLocally' must be a boolean value if provided.\",\n      );\n    }\n\n    return new Promise((resolve, reject) => {\n      const onCompleteWrapper = (error, committed, snapshotData) => {\n        if (isFunction(onComplete)) {\n          if (error) {\n            onComplete(error, committed, null);\n          } else {\n            onComplete(null, committed, new DatabaseDataSnapshot(this, snapshotData));\n          }\n        }\n\n        if (error) {\n          return reject(error);\n        }\n        return resolve({\n          committed,\n          snapshot: new DatabaseDataSnapshot(this, snapshotData),\n        });\n      };\n\n      // start the transaction natively\n      this._database._transaction.add(this, transactionUpdate, onCompleteWrapper, applyLocally);\n    });\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.database.Reference#setpriority\n   * @param priority\n   * @param onComplete\n   */\n  setPriority(priority, onComplete) {\n    if (!isNumber(priority) && !isString(priority) && !isNull(priority)) {\n      throw new Error(\n        \"firebase.database().ref().setPriority(*) 'priority' must be a number, string or null value.\",\n      );\n    }\n\n    if (!isUndefined(onComplete) && !isFunction(onComplete)) {\n      throw new Error(\n        \"firebase.database().ref().setPriority(_, *) 'onComplete' must be a function if provided.\",\n      );\n    }\n\n    return promiseWithOptionalCallback(\n      this._database.native.setPriority(this.path, { priority }),\n      onComplete,\n    );\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.database.Reference#push\n   * @param value\n   * @param onComplete\n   * @returns {DatabaseReference}\n   */\n  push(value, onComplete) {\n    if (!isUndefined(onComplete) && !isFunction(onComplete)) {\n      throw new Error(\n        \"firebase.database().ref().push(_, *) 'onComplete' must be a function if provided.\",\n      );\n    }\n\n    const id = generateDatabaseId(this._database._serverTimeOffset);\n\n    if (isUndefined(value) || isNull(value)) {\n      return new DatabaseThenableReference(\n        this._database,\n        pathChild(this.path, id),\n        Promise.resolve(this.child(id)),\n      );\n    }\n\n    const pushRef = this.child(id);\n\n    const promise = pushRef.set(value, onComplete).then(() => pushRef);\n\n    // Prevent unhandled promise rejection if onComplete is passed\n    if (onComplete) {\n      promise.catch(() => {});\n    }\n\n    return new DatabaseThenableReference(this._database, pathChild(this.path, id), promise);\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.database.Reference#ondisconnect\n   */\n  onDisconnect() {\n    return new DatabaseOnDisconnect(this);\n  }\n}\n\n// To avoid React Native require cycle warnings\nprovideReferenceClassForQuery(DatabaseReference);\nprovideReferenceClassForThenable(DatabaseReference);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}