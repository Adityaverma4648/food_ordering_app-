{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport NativeError from '@react-native-firebase/app/lib/internal/NativeFirebaseError';\nvar transactionId = 0;\nvar generateTransactionId = function generateTransactionId() {\n  return transactionId++;\n};\nvar DatabaseTransaction = function () {\n  function DatabaseTransaction(database) {\n    _classCallCheck(this, DatabaseTransaction);\n    this._database = database;\n    this._emitter = database.emitter;\n    this._transactions = {};\n    this._emitter.addListener(this._database.eventNameForApp('database_transaction_event'), this._onTransactionEvent.bind(this));\n  }\n  _createClass(DatabaseTransaction, [{\n    key: \"add\",\n    value: function add(reference, transactionUpdater, onComplete) {\n      var applyLocally = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var id = generateTransactionId();\n      this._transactions[id] = {\n        id: id,\n        reference: reference,\n        transactionUpdater: transactionUpdater,\n        onComplete: onComplete,\n        applyLocally: applyLocally,\n        completed: false,\n        started: true\n      };\n      this._database.native.transactionStart(reference.path, id, applyLocally);\n    }\n  }, {\n    key: \"_getTransaction\",\n    value: function _getTransaction(id) {\n      return this._transactions[id];\n    }\n  }, {\n    key: \"_removeTransaction\",\n    value: function _removeTransaction(id) {\n      var _this = this;\n      setImmediate(function () {\n        delete _this._transactions[id];\n      });\n    }\n  }, {\n    key: \"_onTransactionEvent\",\n    value: function _onTransactionEvent(event) {\n      switch (event.body.type) {\n        case 'update':\n          return this._handleUpdate(event);\n        case 'error':\n          return this._handleError(event);\n        case 'complete':\n          return this._handleComplete(event);\n        default:\n          return undefined;\n      }\n    }\n  }, {\n    key: \"_handleUpdate\",\n    value: function _handleUpdate(event) {\n      var newValue;\n      var id = event.id,\n        body = event.body;\n      var value = body.value;\n      try {\n        var transaction = this._getTransaction(id);\n        if (!transaction) {\n          return;\n        }\n        newValue = transaction.transactionUpdater(value);\n      } finally {\n        var abort = false;\n        if (newValue === undefined) {\n          abort = true;\n        }\n        this._database.native.transactionTryCommit(id, {\n          value: newValue,\n          abort: abort\n        });\n      }\n    }\n  }, {\n    key: \"_handleError\",\n    value: function _handleError(event) {\n      var transaction = this._getTransaction(event.id);\n      if (transaction && !transaction.completed) {\n        transaction.completed = true;\n        try {\n          var error = NativeError.fromEvent(event.body.error, 'database');\n          transaction.onComplete(error, false, null);\n        } finally {\n          this._removeTransaction(event.id);\n        }\n      }\n    }\n  }, {\n    key: \"_handleComplete\",\n    value: function _handleComplete(event) {\n      var transaction = this._getTransaction(event.id);\n      if (transaction && !transaction.completed) {\n        transaction.completed = true;\n        try {\n          transaction.onComplete(null, event.body.committed, Object.assign({}, event.body.snapshot));\n        } finally {\n          this._removeTransaction(event.id);\n        }\n      }\n    }\n  }]);\n  return DatabaseTransaction;\n}();\nexport { DatabaseTransaction as default };","map":{"version":3,"names":["NativeError","transactionId","generateTransactionId","DatabaseTransaction","database","_classCallCheck","_database","_emitter","emitter","_transactions","addListener","eventNameForApp","_onTransactionEvent","bind","_createClass","key","value","add","reference","transactionUpdater","onComplete","applyLocally","arguments","length","undefined","id","completed","started","native","transactionStart","path","_getTransaction","_removeTransaction","_this","setImmediate","event","body","type","_handleUpdate","_handleError","_handleComplete","newValue","transaction","abort","transactionTryCommit","error","fromEvent","committed","Object","assign","snapshot","default"],"sources":["D:/food_ordering_app-ReactNative/node_modules/@react-native-firebase/database/lib/DatabaseTransaction.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport NativeError from '@react-native-firebase/app/lib/internal/NativeFirebaseError';\n\nlet transactionId = 0;\n\n/**\n * Uses the push id generator to create a transaction id\n * @returns {number}\n * @private\n */\n\nconst generateTransactionId = () => transactionId++;\n\nexport default class DatabaseTransaction {\n  constructor(database) {\n    this._database = database;\n    this._emitter = database.emitter;\n    this._transactions = {};\n\n    this._emitter.addListener(\n      this._database.eventNameForApp('database_transaction_event'),\n      this._onTransactionEvent.bind(this),\n    );\n  }\n\n  /**\n   *\n   * @param reference\n   * @param transactionUpdater\n   * @param onComplete\n   * @param applyLocally\n   */\n  add(reference, transactionUpdater, onComplete, applyLocally = false) {\n    const id = generateTransactionId();\n\n    this._transactions[id] = {\n      id,\n      reference,\n      transactionUpdater,\n      onComplete,\n      applyLocally,\n      completed: false,\n      started: true,\n    };\n\n    this._database.native.transactionStart(reference.path, id, applyLocally);\n  }\n\n  /**\n   * Returns a transaction by ID\n   *\n   * @param id\n   * @return {*}\n   * @private\n   */\n  _getTransaction(id) {\n    return this._transactions[id];\n  }\n\n  /**\n   * Removes a transaction by ID on the next event loop\n   *\n   * @param id\n   * @private\n   */\n  _removeTransaction(id) {\n    setImmediate(() => {\n      delete this._transactions[id];\n    });\n  }\n\n  /**\n   *\n   * @param event\n   * @private\n   */\n  _onTransactionEvent(event) {\n    switch (event.body.type) {\n      case 'update':\n        return this._handleUpdate(event);\n      case 'error':\n        return this._handleError(event);\n      case 'complete':\n        return this._handleComplete(event);\n      default:\n        return undefined;\n    }\n  }\n\n  /**\n   *\n   * @param event\n   * @private\n   */\n  _handleUpdate(event) {\n    let newValue;\n\n    const { id, body } = event;\n    const { value } = body;\n\n    try {\n      const transaction = this._getTransaction(id);\n      if (!transaction) {\n        return;\n      }\n      newValue = transaction.transactionUpdater(value);\n    } finally {\n      let abort = false;\n\n      if (newValue === undefined) {\n        abort = true;\n      }\n\n      this._database.native.transactionTryCommit(id, {\n        value: newValue,\n        abort,\n      });\n    }\n  }\n\n  /**\n   *\n   * @param event\n   * @private\n   */\n  _handleError(event) {\n    const transaction = this._getTransaction(event.id);\n\n    if (transaction && !transaction.completed) {\n      transaction.completed = true;\n\n      try {\n        // error, committed, snapshot\n        const error = NativeError.fromEvent(event.body.error, 'database');\n        transaction.onComplete(error, false, null);\n      } finally {\n        this._removeTransaction(event.id);\n      }\n    }\n  }\n\n  /**\n   *\n   * @param event\n   * @private\n   */\n  _handleComplete(event) {\n    const transaction = this._getTransaction(event.id);\n\n    if (transaction && !transaction.completed) {\n      transaction.completed = true;\n\n      try {\n        // error, committed, snapshot\n        transaction.onComplete(null, event.body.committed, Object.assign({}, event.body.snapshot));\n      } finally {\n        this._removeTransaction(event.id);\n      }\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}