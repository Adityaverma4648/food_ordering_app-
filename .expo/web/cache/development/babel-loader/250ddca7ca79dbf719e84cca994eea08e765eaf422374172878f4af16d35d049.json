{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport { isAndroid, isBoolean, isNumber, isString } from '@react-native-firebase/app/lib/common';\nimport { createModuleNamespace, FirebaseModule, getFirebaseRoot } from '@react-native-firebase/app/lib/internal';\nimport DatabaseReference from \"./DatabaseReference\";\nimport DatabaseStatics from \"./DatabaseStatics\";\nimport DatabaseTransaction from \"./DatabaseTransaction\";\nimport version from \"./version\";\nvar namespace = 'database';\nvar nativeModuleName = ['RNFBDatabaseModule', 'RNFBDatabaseReferenceModule', 'RNFBDatabaseQueryModule', 'RNFBDatabaseOnDisconnectModule', 'RNFBDatabaseTransactionModule'];\nvar FirebaseDatabaseModule = function (_FirebaseModule) {\n  _inherits(FirebaseDatabaseModule, _FirebaseModule);\n  var _super = _createSuper(FirebaseDatabaseModule);\n  function FirebaseDatabaseModule(app, config, databaseUrl) {\n    var _this;\n    _classCallCheck(this, FirebaseDatabaseModule);\n    _this = _super.call(this, app, config, databaseUrl);\n    _this._serverTimeOffset = 0;\n    _this._customUrlOrRegion = databaseUrl || _this.app.options.databaseURL;\n    _this._transaction = new DatabaseTransaction(_assertThisInitialized(_this));\n    setTimeout(function () {\n      _this._syncServerTimeOffset();\n    }, 100);\n    return _this;\n  }\n  _createClass(FirebaseDatabaseModule, [{\n    key: \"_syncServerTimeOffset\",\n    value: function _syncServerTimeOffset() {\n      var _this2 = this;\n      this.ref('.info/serverTimeOffset').on('value', function (snapshot) {\n        _this2._serverTimeOffset = snapshot.val();\n      });\n    }\n  }, {\n    key: \"getServerTime\",\n    value: function getServerTime() {\n      return new Date(Date.now() + this._serverTimeOffset);\n    }\n  }, {\n    key: \"ref\",\n    value: function ref() {\n      var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '/';\n      if (!isString(path)) {\n        throw new Error(\"firebase.app().database().ref(*) 'path' must be a string value.\");\n      }\n      if (/[#$\\[\\]'?]/g.test(path)) {\n        throw new Error(\"Paths must be non-empty strings and can't contain #, $, [, ], ' or ? | path: \" + path);\n      }\n      return new DatabaseReference(this, path);\n    }\n  }, {\n    key: \"refFromURL\",\n    value: function refFromURL(url) {\n      if (!isString(url) || !url.startsWith('https://')) {\n        throw new Error(\"firebase.app().database().refFromURL(*) 'url' must be a valid database URL.\");\n      }\n      if (!url.includes(this._customUrlOrRegion)) {\n        throw new Error(\"firebase.app().database().refFromURL(*) 'url' must be the same domain as the current instance (\" + this._customUrlOrRegion + \"). To use a different database domain, create a new Firebase instance.\");\n      }\n      var path = url.replace(this._customUrlOrRegion, '');\n      if (path.includes('?')) {\n        path = path.slice(0, path.indexOf('?'));\n      }\n      return new DatabaseReference(this, path || '/');\n    }\n  }, {\n    key: \"goOnline\",\n    value: function goOnline() {\n      return this.native.goOnline();\n    }\n  }, {\n    key: \"goOffline\",\n    value: function goOffline() {\n      return this.native.goOffline();\n    }\n  }, {\n    key: \"setPersistenceEnabled\",\n    value: function setPersistenceEnabled(enabled) {\n      if (!isBoolean(enabled)) {\n        throw new Error(\"firebase.app().database().setPersistenceEnabled(*) 'enabled' must be a boolean value.\");\n      }\n      return this.native.setPersistenceEnabled(enabled);\n    }\n  }, {\n    key: \"setLoggingEnabled\",\n    value: function setLoggingEnabled(enabled) {\n      if (!isBoolean(enabled)) {\n        throw new Error(\"firebase.app().database().setLoggingEnabled(*) 'enabled' must be a boolean value.\");\n      }\n      return this.native.setLoggingEnabled(enabled);\n    }\n  }, {\n    key: \"setPersistenceCacheSizeBytes\",\n    value: function setPersistenceCacheSizeBytes(bytes) {\n      if (!isNumber(bytes)) {\n        throw new Error(\"firebase.app().database().setPersistenceCacheSizeBytes(*) 'bytes' must be a number value.\");\n      }\n      if (bytes < 1048576) {\n        throw new Error(\"firebase.app().database().setPersistenceCacheSizeBytes(*) 'bytes' must be greater than 1048576 bytes (1MB).\");\n      }\n      if (bytes > 104857600) {\n        throw new Error(\"firebase.app().database().setPersistenceCacheSizeBytes(*) 'bytes' must be less than 104857600 bytes (100MB).\");\n      }\n      return this.native.setPersistenceCacheSizeBytes(bytes);\n    }\n  }, {\n    key: \"useEmulator\",\n    value: function useEmulator(host, port) {\n      if (!host || !isString(host) || !port || !isNumber(port)) {\n        throw new Error('firebase.database().useEmulator() takes a non-empty host and port');\n      }\n      var _host = host;\n      if (isAndroid && _host) {\n        if (_host === 'localhost' || _host === '127.0.0.1') {\n          _host = '10.0.2.2';\n          console.log('Mapping database host to \"10.0.2.2\" for android emulators. Use real IP on real devices.');\n        }\n      }\n      this.native.useEmulator(_host, port);\n      return [_host, port];\n    }\n  }]);\n  return FirebaseDatabaseModule;\n}(FirebaseModule);\nexport var SDK_VERSION = version;\nexport default createModuleNamespace({\n  statics: DatabaseStatics,\n  version: version,\n  namespace: namespace,\n  nativeModuleName: nativeModuleName,\n  nativeEvents: ['database_transaction_event', 'database_sync_event'],\n  hasMultiAppSupport: true,\n  hasCustomUrlOrRegionSupport: true,\n  ModuleClass: FirebaseDatabaseModule\n});\nexport var firebase = getFirebaseRoot();","map":{"version":3,"names":["isAndroid","isBoolean","isNumber","isString","createModuleNamespace","FirebaseModule","getFirebaseRoot","DatabaseReference","DatabaseStatics","DatabaseTransaction","version","namespace","nativeModuleName","FirebaseDatabaseModule","_FirebaseModule","_inherits","_super","_createSuper","app","config","databaseUrl","_this","_classCallCheck","call","_serverTimeOffset","_customUrlOrRegion","options","databaseURL","_transaction","_assertThisInitialized","setTimeout","_syncServerTimeOffset","_createClass","key","value","_this2","ref","on","snapshot","val","getServerTime","Date","now","path","arguments","length","undefined","Error","test","refFromURL","url","startsWith","includes","replace","slice","indexOf","goOnline","native","goOffline","setPersistenceEnabled","enabled","setLoggingEnabled","setPersistenceCacheSizeBytes","bytes","useEmulator","host","port","_host","console","log","SDK_VERSION","statics","nativeEvents","hasMultiAppSupport","hasCustomUrlOrRegionSupport","ModuleClass","firebase"],"sources":["D:/food_ordering_app-ReactNative/node_modules/@react-native-firebase/database/lib/index.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isAndroid, isBoolean, isNumber, isString } from '@react-native-firebase/app/lib/common';\nimport {\n  createModuleNamespace,\n  FirebaseModule,\n  getFirebaseRoot,\n} from '@react-native-firebase/app/lib/internal';\nimport DatabaseReference from './DatabaseReference';\nimport DatabaseStatics from './DatabaseStatics';\nimport DatabaseTransaction from './DatabaseTransaction';\nimport version from './version';\n\nconst namespace = 'database';\n\nconst nativeModuleName = [\n  'RNFBDatabaseModule',\n  'RNFBDatabaseReferenceModule',\n  'RNFBDatabaseQueryModule',\n  'RNFBDatabaseOnDisconnectModule',\n  'RNFBDatabaseTransactionModule',\n];\n\nclass FirebaseDatabaseModule extends FirebaseModule {\n  constructor(app, config, databaseUrl) {\n    super(app, config, databaseUrl);\n    this._serverTimeOffset = 0;\n    this._customUrlOrRegion = databaseUrl || this.app.options.databaseURL;\n    this._transaction = new DatabaseTransaction(this);\n    setTimeout(() => {\n      this._syncServerTimeOffset();\n    }, 100);\n  }\n\n  /**\n   * Keep the server time offset in sync with the server time\n   * @private\n   */\n  _syncServerTimeOffset() {\n    this.ref('.info/serverTimeOffset').on('value', snapshot => {\n      this._serverTimeOffset = snapshot.val();\n    });\n  }\n\n  /**\n   *\n   * @returns {Date}\n   * @private\n   */\n  getServerTime() {\n    return new Date(Date.now() + this._serverTimeOffset);\n  }\n\n  /**\n   * Returns a new Reference instance from a given path. Defaults to the root reference.\n   * @param path\n   * @returns {DatabaseReference}\n   */\n  ref(path = '/') {\n    if (!isString(path)) {\n      throw new Error(\"firebase.app().database().ref(*) 'path' must be a string value.\");\n    }\n\n    if (/[#$\\[\\]'?]/g.test(path)) {\n      throw new Error(\n        `Paths must be non-empty strings and can't contain #, $, [, ], ' or ? | path: ${path}`,\n      );\n    }\n\n    return new DatabaseReference(this, path);\n  }\n\n  /**\n   * Generates a Reference from a database URL.\n   * Note domain must be the same.\n   * Any query parameters are stripped as per the web SDK.\n   * @param url\n   * @returns {DatabaseReference}\n   */\n  refFromURL(url) {\n    if (!isString(url) || !url.startsWith('https://')) {\n      throw new Error(\n        \"firebase.app().database().refFromURL(*) 'url' must be a valid database URL.\",\n      );\n    }\n\n    if (!url.includes(this._customUrlOrRegion)) {\n      throw new Error(\n        `firebase.app().database().refFromURL(*) 'url' must be the same domain as the current instance (${this._customUrlOrRegion}). To use a different database domain, create a new Firebase instance.`,\n      );\n    }\n\n    let path = url.replace(this._customUrlOrRegion, '');\n    if (path.includes('?')) {\n      path = path.slice(0, path.indexOf('?'));\n    }\n\n    return new DatabaseReference(this, path || '/');\n  }\n\n  /**\n   * goOnline\n   */\n  goOnline() {\n    return this.native.goOnline();\n  }\n\n  /**\n   * goOffline\n   */\n  goOffline() {\n    return this.native.goOffline();\n  }\n\n  /**\n   *\n   * @param enabled\n   */\n  setPersistenceEnabled(enabled) {\n    if (!isBoolean(enabled)) {\n      throw new Error(\n        \"firebase.app().database().setPersistenceEnabled(*) 'enabled' must be a boolean value.\",\n      );\n    }\n\n    return this.native.setPersistenceEnabled(enabled);\n  }\n\n  /**\n   *\n   * @param enabled\n   */\n  setLoggingEnabled(enabled) {\n    if (!isBoolean(enabled)) {\n      throw new Error(\n        \"firebase.app().database().setLoggingEnabled(*) 'enabled' must be a boolean value.\",\n      );\n    }\n\n    return this.native.setLoggingEnabled(enabled);\n  }\n\n  /**\n   *\n   * @param bytes\n   */\n  setPersistenceCacheSizeBytes(bytes) {\n    if (!isNumber(bytes)) {\n      throw new Error(\n        \"firebase.app().database().setPersistenceCacheSizeBytes(*) 'bytes' must be a number value.\",\n      );\n    }\n\n    if (bytes < 1048576) {\n      throw new Error(\n        \"firebase.app().database().setPersistenceCacheSizeBytes(*) 'bytes' must be greater than 1048576 bytes (1MB).\",\n      );\n    }\n\n    if (bytes > 104857600) {\n      throw new Error(\n        \"firebase.app().database().setPersistenceCacheSizeBytes(*) 'bytes' must be less than 104857600 bytes (100MB).\",\n      );\n    }\n\n    return this.native.setPersistenceCacheSizeBytes(bytes);\n  }\n\n  useEmulator(host, port) {\n    if (!host || !isString(host) || !port || !isNumber(port)) {\n      throw new Error('firebase.database().useEmulator() takes a non-empty host and port');\n    }\n    let _host = host;\n    if (isAndroid && _host) {\n      if (_host === 'localhost' || _host === '127.0.0.1') {\n        _host = '10.0.2.2';\n        // eslint-disable-next-line no-console\n        console.log(\n          'Mapping database host to \"10.0.2.2\" for android emulators. Use real IP on real devices.',\n        );\n      }\n    }\n    this.native.useEmulator(_host, port);\n    return [_host, port]; // undocumented return, just used to unit test android host remapping\n  }\n}\n\n// import { SDK_VERSION } from '@react-native-firebase/database';\nexport const SDK_VERSION = version;\n\n// import database from '@react-native-firebase/database';\n// database().X(...);\nexport default createModuleNamespace({\n  statics: DatabaseStatics,\n  version,\n  namespace,\n  nativeModuleName,\n  nativeEvents: ['database_transaction_event', 'database_sync_event'],\n  hasMultiAppSupport: true,\n  hasCustomUrlOrRegionSupport: true,\n  ModuleClass: FirebaseDatabaseModule,\n});\n\n// import database, { firebase } from '@react-native-firebase/database';\n// database().X(...);\n// firebase.database().X(...);\nexport const firebase = getFirebaseRoot();\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}