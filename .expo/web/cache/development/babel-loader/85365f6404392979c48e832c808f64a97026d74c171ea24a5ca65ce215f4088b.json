{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { isFunction, isNull, isNumber, isObject, isString, isUndefined, isValidPath, promiseWithOptionalCallback } from '@react-native-firebase/app/lib/common';\nvar DatabaseOnDisconnect = function () {\n  function DatabaseOnDisconnect(reference) {\n    _classCallCheck(this, DatabaseOnDisconnect);\n    this._ref = reference;\n  }\n  _createClass(DatabaseOnDisconnect, [{\n    key: \"cancel\",\n    value: function cancel(onComplete) {\n      if (!isUndefined(onComplete) && !isFunction(onComplete)) {\n        throw new Error(\"firebase.database().ref().onDisconnect().cancel(*) 'onComplete' must be a function if provided.\");\n      }\n      return promiseWithOptionalCallback(this._ref._database.native.onDisconnectCancel(this._ref.path), onComplete);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(onComplete) {\n      if (!isUndefined(onComplete) && !isFunction(onComplete)) {\n        throw new Error(\"firebase.database().ref().onDisconnect().remove(*) 'onComplete' must be a function if provided.\");\n      }\n      return promiseWithOptionalCallback(this._ref._database.native.onDisconnectRemove(this._ref.path), onComplete);\n    }\n  }, {\n    key: \"set\",\n    value: function set(value, onComplete) {\n      if (isUndefined(value)) {\n        throw new Error(\"firebase.database().ref().value(*) 'value' must be defined.\");\n      }\n      if (!isUndefined(onComplete) && !isFunction(onComplete)) {\n        throw new Error(\"firebase.database().ref().onDisconnect().set(_, *) 'onComplete' must be a function if provided.\");\n      }\n      return promiseWithOptionalCallback(this._ref._database.native.onDisconnectSet(this._ref.path, {\n        value: value\n      }), onComplete);\n    }\n  }, {\n    key: \"setWithPriority\",\n    value: function setWithPriority(value, priority, onComplete) {\n      if (isUndefined(value)) {\n        throw new Error(\"firebase.database().ref().setWithPriority(*) 'value' must be defined.\");\n      }\n      if (!isNumber(priority) && !isString(priority) && !isNull(priority)) {\n        throw new Error(\"firebase.database().ref().onDisconnect().setWithPriority(_, *) 'priority' must be a number, string or null value.\");\n      }\n      if (!isUndefined(onComplete) && !isFunction(onComplete)) {\n        throw new Error(\"firebase.database().ref().onDisconnect().setWithPriority(_, _, *) 'onComplete' must be a function if provided.\");\n      }\n      return promiseWithOptionalCallback(this._ref._database.native.onDisconnectSetWithPriority(this._ref.path, {\n        value: value,\n        priority: priority\n      }), onComplete);\n    }\n  }, {\n    key: \"update\",\n    value: function update(values, onComplete) {\n      if (!isObject(values)) {\n        throw new Error(\"firebase.database().ref().onDisconnect().update(*) 'values' must be an object.\");\n      }\n      if (!Object.keys(values).length) {\n        throw new Error(\"firebase.database().ref().onDisconnect().update(*) 'values' must be an object containing multiple values.\");\n      }\n      var keys = Object.keys(values);\n      for (var i = 0; i < keys.length; i++) {\n        if (!isValidPath(keys[i])) {\n          throw new Error('firebase.database().onDisconnect().update(*) \\'values\\' contains an invalid path. Paths must be non-empty strings and can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\n        }\n      }\n      if (!isUndefined(onComplete) && !isFunction(onComplete)) {\n        throw new Error(\"firebase.database().ref().onDisconnect().update(_, *) 'onComplete' must be a function if provided.\");\n      }\n      return promiseWithOptionalCallback(this._ref._database.native.onDisconnectUpdate(this._ref.path, {\n        values: values\n      }), onComplete);\n    }\n  }]);\n  return DatabaseOnDisconnect;\n}();\nexport { DatabaseOnDisconnect as default };","map":{"version":3,"names":["isFunction","isNull","isNumber","isObject","isString","isUndefined","isValidPath","promiseWithOptionalCallback","DatabaseOnDisconnect","reference","_classCallCheck","_ref","_createClass","key","value","cancel","onComplete","Error","_database","native","onDisconnectCancel","path","remove","onDisconnectRemove","set","onDisconnectSet","setWithPriority","priority","onDisconnectSetWithPriority","update","values","Object","keys","length","i","onDisconnectUpdate","default"],"sources":["D:/food_ordering_app-ReactNative/node_modules/@react-native-firebase/database/lib/DatabaseOnDisconnect.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport {\n  isFunction,\n  isNull,\n  isNumber,\n  isObject,\n  isString,\n  isUndefined,\n  isValidPath,\n  promiseWithOptionalCallback,\n} from '@react-native-firebase/app/lib/common';\n\nexport default class DatabaseOnDisconnect {\n  constructor(reference) {\n    this._ref = reference;\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.database.OnDisconnect#cancel\n   */\n  cancel(onComplete) {\n    if (!isUndefined(onComplete) && !isFunction(onComplete)) {\n      throw new Error(\n        \"firebase.database().ref().onDisconnect().cancel(*) 'onComplete' must be a function if provided.\",\n      );\n    }\n\n    return promiseWithOptionalCallback(\n      this._ref._database.native.onDisconnectCancel(this._ref.path),\n      onComplete,\n    );\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.database.OnDisconnect#remove\n   */\n  remove(onComplete) {\n    if (!isUndefined(onComplete) && !isFunction(onComplete)) {\n      throw new Error(\n        \"firebase.database().ref().onDisconnect().remove(*) 'onComplete' must be a function if provided.\",\n      );\n    }\n\n    return promiseWithOptionalCallback(\n      this._ref._database.native.onDisconnectRemove(this._ref.path),\n      onComplete,\n    );\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.database.OnDisconnect#set\n   */\n  set(value, onComplete) {\n    if (isUndefined(value)) {\n      throw new Error(\"firebase.database().ref().value(*) 'value' must be defined.\");\n    }\n\n    if (!isUndefined(onComplete) && !isFunction(onComplete)) {\n      throw new Error(\n        \"firebase.database().ref().onDisconnect().set(_, *) 'onComplete' must be a function if provided.\",\n      );\n    }\n\n    return promiseWithOptionalCallback(\n      this._ref._database.native.onDisconnectSet(this._ref.path, { value }),\n      onComplete,\n    );\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.database.OnDisconnect#setwithpriority\n   */\n  setWithPriority(value, priority, onComplete) {\n    if (isUndefined(value)) {\n      throw new Error(\"firebase.database().ref().setWithPriority(*) 'value' must be defined.\");\n    }\n\n    if (!isNumber(priority) && !isString(priority) && !isNull(priority)) {\n      throw new Error(\n        \"firebase.database().ref().onDisconnect().setWithPriority(_, *) 'priority' must be a number, string or null value.\",\n      );\n    }\n\n    if (!isUndefined(onComplete) && !isFunction(onComplete)) {\n      throw new Error(\n        \"firebase.database().ref().onDisconnect().setWithPriority(_, _, *) 'onComplete' must be a function if provided.\",\n      );\n    }\n\n    return promiseWithOptionalCallback(\n      this._ref._database.native.onDisconnectSetWithPriority(this._ref.path, { value, priority }),\n      onComplete,\n    );\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.database.OnDisconnect#update\n   */\n  update(values, onComplete) {\n    if (!isObject(values)) {\n      throw new Error(\n        \"firebase.database().ref().onDisconnect().update(*) 'values' must be an object.\",\n      );\n    }\n\n    if (!Object.keys(values).length) {\n      throw new Error(\n        \"firebase.database().ref().onDisconnect().update(*) 'values' must be an object containing multiple values.\",\n      );\n    }\n\n    const keys = Object.keys(values);\n    for (let i = 0; i < keys.length; i++) {\n      if (!isValidPath(keys[i])) {\n        throw new Error(\n          'firebase.database().onDisconnect().update(*) \\'values\\' contains an invalid path. Paths must be non-empty strings and can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"',\n        );\n      }\n    }\n\n    if (!isUndefined(onComplete) && !isFunction(onComplete)) {\n      throw new Error(\n        \"firebase.database().ref().onDisconnect().update(_, *) 'onComplete' must be a function if provided.\",\n      );\n    }\n\n    return promiseWithOptionalCallback(\n      this._ref._database.native.onDisconnectUpdate(this._ref.path, { values }),\n      onComplete,\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}