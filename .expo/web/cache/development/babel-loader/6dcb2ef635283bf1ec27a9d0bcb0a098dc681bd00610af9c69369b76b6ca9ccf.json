{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { isString } from '@react-native-firebase/app/lib/common';\nimport NativeError from '@react-native-firebase/app/lib/internal/NativeFirebaseError';\nimport SharedEventEmitter from '@react-native-firebase/app/lib/internal/SharedEventEmitter';\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport DatabaseDataSnapshot from \"./DatabaseDataSnapshot\";\nvar DatabaseSyncTree = function () {\n  function DatabaseSyncTree() {\n    _classCallCheck(this, DatabaseSyncTree);\n    this._tree = {};\n    this._reverseLookup = {};\n    SharedEventEmitter.addListener('database_sync_event', this._handleSyncEvent.bind(this));\n  }\n  _createClass(DatabaseSyncTree, [{\n    key: \"native\",\n    get: function get() {\n      return NativeModules.RNFBDatabaseQueryModule;\n    }\n  }, {\n    key: \"_handleSyncEvent\",\n    value: function _handleSyncEvent(event) {\n      var body = event.body;\n      if (body.error) {\n        this._handleErrorEvent(body);\n      } else {\n        this._handleValueEvent(body);\n      }\n    }\n  }, {\n    key: \"_handleErrorEvent\",\n    value: function _handleErrorEvent(event) {\n      var _event$registration = event.registration,\n        eventRegistrationKey = _event$registration.eventRegistrationKey,\n        registrationCancellationKey = _event$registration.registrationCancellationKey;\n      var registration = this.getRegistration(registrationCancellationKey);\n      if (registration) {\n        var error = NativeError.fromEvent(event.error, 'database');\n        SharedEventEmitter.emit(registrationCancellationKey, error);\n        this.removeRegistration(eventRegistrationKey);\n      }\n    }\n  }, {\n    key: \"_handleValueEvent\",\n    value: function _handleValueEvent(event) {\n      var _event$registration2 = event.registration,\n        key = _event$registration2.key,\n        eventRegistrationKey = _event$registration2.eventRegistrationKey;\n      var registration = this.getRegistration(eventRegistrationKey);\n      if (!registration) {\n        return this.native.off(key, eventRegistrationKey);\n      }\n      var snapshot;\n      var previousChildName;\n      if (event.eventType === 'value') {\n        snapshot = new DatabaseDataSnapshot(registration.ref, event.data);\n      } else {\n        snapshot = new DatabaseDataSnapshot(registration.ref, event.data.snapshot);\n        previousChildName = event.data.previousChildName;\n      }\n      return SharedEventEmitter.emit(eventRegistrationKey, snapshot, previousChildName);\n    }\n  }, {\n    key: \"getRegistration\",\n    value: function getRegistration(registration) {\n      return this._reverseLookup[registration] ? Object.assign({}, this._reverseLookup[registration]) : null;\n    }\n  }, {\n    key: \"removeListenersForRegistrations\",\n    value: function removeListenersForRegistrations(registrations) {\n      if (isString(registrations)) {\n        this.removeRegistration(registrations);\n        SharedEventEmitter.removeAllListeners(registrations);\n        return 1;\n      }\n      if (!Array.isArray(registrations)) {\n        return 0;\n      }\n      for (var i = 0, len = registrations.length; i < len; i++) {\n        this.removeRegistration(registrations[i]);\n        SharedEventEmitter.removeAllListeners(registrations[i]);\n      }\n      return registrations.length;\n    }\n  }, {\n    key: \"removeListenerRegistrations\",\n    value: function removeListenerRegistrations(listener, registrations) {\n      if (!Array.isArray(registrations)) {\n        return [];\n      }\n      var removed = [];\n      for (var i = 0, len = registrations.length; i < len; i++) {\n        var registration = registrations[i];\n        var subscriptions = void 0;\n        if (SharedEventEmitter._subscriber) {\n          subscriptions = SharedEventEmitter._subscriber.getSubscriptionsForType(registration);\n        } else {\n          var registrySubscriptionsSet = SharedEventEmitter._registry[registration];\n          if (registrySubscriptionsSet) {\n            subscriptions = Array.from(registrySubscriptionsSet);\n          }\n        }\n        if (subscriptions) {\n          for (var j = 0, l = subscriptions.length; j < l; j++) {\n            var subscription = subscriptions[j];\n            if (subscription && subscription.listener === listener) {\n              subscription.remove();\n              removed.push(registration);\n              this.removeRegistration(registration);\n            }\n          }\n        }\n      }\n      return removed;\n    }\n  }, {\n    key: \"getRegistrationsByPath\",\n    value: function getRegistrationsByPath(path) {\n      var out = [];\n      var eventKeys = Object.keys(this._tree[path] || {});\n      for (var i = 0, len = eventKeys.length; i < len; i++) {\n        Array.prototype.push.apply(out, Object.keys(this._tree[path][eventKeys[i]]));\n      }\n      return out;\n    }\n  }, {\n    key: \"getRegistrationsByPathEvent\",\n    value: function getRegistrationsByPathEvent(path, eventType) {\n      if (!this._tree[path]) {\n        return [];\n      }\n      if (!this._tree[path][eventType]) {\n        return [];\n      }\n      return Object.keys(this._tree[path][eventType]);\n    }\n  }, {\n    key: \"getOneByPathEventListener\",\n    value: function getOneByPathEventListener(path, eventType, listener) {\n      if (!this._tree[path]) {\n        return null;\n      }\n      if (!this._tree[path][eventType]) {\n        return null;\n      }\n      var registrationsForPathEvent = Object.entries(this._tree[path][eventType]);\n      for (var i = 0; i < registrationsForPathEvent.length; i++) {\n        var registration = registrationsForPathEvent[i];\n        if (registration[1] === listener) {\n          return registration[0];\n        }\n      }\n      return null;\n    }\n  }, {\n    key: \"addRegistration\",\n    value: function addRegistration(registration) {\n      var _this = this;\n      var eventRegistrationKey = registration.eventRegistrationKey,\n        eventType = registration.eventType,\n        listener = registration.listener,\n        once = registration.once,\n        path = registration.path;\n      if (!this._tree[path]) {\n        this._tree[path] = {};\n      }\n      if (!this._tree[path][eventType]) {\n        this._tree[path][eventType] = {};\n      }\n      this._tree[path][eventType][eventRegistrationKey] = listener;\n      this._reverseLookup[eventRegistrationKey] = registration;\n      if (once) {\n        var subscription = SharedEventEmitter.addListener(eventRegistrationKey, function (event) {\n          _this._onOnceRemoveRegistration(eventRegistrationKey, listener)(event);\n          subscription.remove();\n        });\n      } else {\n        SharedEventEmitter.addListener(eventRegistrationKey, listener);\n      }\n      return eventRegistrationKey;\n    }\n  }, {\n    key: \"removeRegistration\",\n    value: function removeRegistration(registration) {\n      if (!this._reverseLookup[registration]) {\n        return false;\n      }\n      var _this$_reverseLookup$ = this._reverseLookup[registration],\n        path = _this$_reverseLookup$.path,\n        eventType = _this$_reverseLookup$.eventType,\n        once = _this$_reverseLookup$.once;\n      if (!this._tree[path]) {\n        delete this._reverseLookup[registration];\n        return false;\n      }\n      if (!this._tree[path][eventType]) {\n        delete this._reverseLookup[registration];\n        return false;\n      }\n      var registrationObj = this._reverseLookup[registration];\n      if (registrationObj && !once) {\n        this.native.off(registrationObj.key, registration);\n      }\n      delete this._tree[path][eventType][registration];\n      delete this._reverseLookup[registration];\n      return !!registrationObj;\n    }\n  }, {\n    key: \"_onOnceRemoveRegistration\",\n    value: function _onOnceRemoveRegistration(registration, listener) {\n      var _this2 = this;\n      return function () {\n        _this2.removeRegistration(registration);\n        listener.apply(void 0, arguments);\n      };\n    }\n  }]);\n  return DatabaseSyncTree;\n}();\nexport default new DatabaseSyncTree();","map":{"version":3,"names":["isString","NativeError","SharedEventEmitter","NativeModules","DatabaseDataSnapshot","DatabaseSyncTree","_classCallCheck","_tree","_reverseLookup","addListener","_handleSyncEvent","bind","_createClass","key","get","RNFBDatabaseQueryModule","value","event","body","error","_handleErrorEvent","_handleValueEvent","_event$registration","registration","eventRegistrationKey","registrationCancellationKey","getRegistration","fromEvent","emit","removeRegistration","_event$registration2","native","off","snapshot","previousChildName","eventType","ref","data","Object","assign","removeListenersForRegistrations","registrations","removeAllListeners","Array","isArray","i","len","length","removeListenerRegistrations","listener","removed","subscriptions","_subscriber","getSubscriptionsForType","registrySubscriptionsSet","_registry","from","j","l","subscription","remove","push","getRegistrationsByPath","path","out","eventKeys","keys","prototype","apply","getRegistrationsByPathEvent","getOneByPathEventListener","registrationsForPathEvent","entries","addRegistration","_this","once","_onOnceRemoveRegistration","_this$_reverseLookup$","registrationObj","_this2","arguments"],"sources":["D:/food_ordering_app-ReactNative/node_modules/@react-native-firebase/database/lib/DatabaseSyncTree.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isString } from '@react-native-firebase/app/lib/common';\nimport NativeError from '@react-native-firebase/app/lib/internal/NativeFirebaseError';\nimport SharedEventEmitter from '@react-native-firebase/app/lib/internal/SharedEventEmitter';\nimport { NativeModules } from 'react-native';\nimport DatabaseDataSnapshot from './DatabaseDataSnapshot';\n\nclass DatabaseSyncTree {\n  constructor() {\n    this._tree = {};\n    this._reverseLookup = {};\n\n    SharedEventEmitter.addListener('database_sync_event', this._handleSyncEvent.bind(this));\n  }\n\n  get native() {\n    return NativeModules.RNFBDatabaseQueryModule;\n  }\n\n  /**\n   * Handles an incoming event from native\n   * @param event\n   * @private\n   */\n  _handleSyncEvent(event) {\n    const { body } = event;\n    if (body.error) {\n      this._handleErrorEvent(body);\n    } else {\n      this._handleValueEvent(body);\n    }\n  }\n\n  /**\n   * Routes native database query listener cancellation events to their js counterparts.\n   *\n   * @param event\n   * @private\n   */\n  _handleErrorEvent(event) {\n    // console.log('SyncTree.ERROR >>>', event);\n    const { eventRegistrationKey, registrationCancellationKey } = event.registration;\n\n    const registration = this.getRegistration(registrationCancellationKey);\n\n    if (registration) {\n      // build a new js error - we additionally attach\n      // the ref as a property for easier debugging\n      const error = NativeError.fromEvent(event.error, 'database');\n\n      // forward on to users .on(successCallback, cancellationCallback <-- listener\n      SharedEventEmitter.emit(registrationCancellationKey, error);\n\n      // remove the paired event registration - if we received a cancellation\n      // event then it's guaranteed that they'll be no further value events\n      this.removeRegistration(eventRegistrationKey);\n    }\n  }\n\n  /**\n   * Routes native database 'on' events to their js equivalent counterpart.\n   * If t is no longer any listeners remaining for this event we internally\n   * call the native unsub method to prevent further events coming through.\n   *\n   * @param event\n   * @private\n   */\n  _handleValueEvent(event) {\n    // console.log('SyncTree.VALUE >>>', event);\n    const { key, eventRegistrationKey } = event.registration;\n    const registration = this.getRegistration(eventRegistrationKey);\n    // console.log('SyncTree.registration >>>', registration);\n\n    if (!registration) {\n      // registration previously revoked\n      // notify native that the registration\n      // no longer exists so it can remove\n      // the native listeners\n      return this.native.off(key, eventRegistrationKey);\n    }\n\n    let snapshot;\n    let previousChildName;\n\n    // Value events don't return a previousChildName\n    if (event.eventType === 'value') {\n      snapshot = new DatabaseDataSnapshot(registration.ref, event.data);\n    } else {\n      snapshot = new DatabaseDataSnapshot(registration.ref, event.data.snapshot);\n      previousChildName = event.data.previousChildName;\n    }\n\n    // forward on to users .on(successCallback <-- listener\n    return SharedEventEmitter.emit(eventRegistrationKey, snapshot, previousChildName);\n  }\n\n  /**\n   * Returns registration information such as appName, ref, path and registration keys.\n   *\n   * @param registration\n   * @return {null}\n   */\n  getRegistration(registration) {\n    return this._reverseLookup[registration]\n      ? Object.assign({}, this._reverseLookup[registration])\n      : null;\n  }\n\n  /**\n   * Removes all listeners for the specified registration keys.\n   *\n   * @param registrations\n   * @return {number}\n   */\n  removeListenersForRegistrations(registrations) {\n    if (isString(registrations)) {\n      this.removeRegistration(registrations);\n      SharedEventEmitter.removeAllListeners(registrations);\n      return 1;\n    }\n\n    if (!Array.isArray(registrations)) {\n      return 0;\n    }\n    for (let i = 0, len = registrations.length; i < len; i++) {\n      this.removeRegistration(registrations[i]);\n      SharedEventEmitter.removeAllListeners(registrations[i]);\n    }\n\n    return registrations.length;\n  }\n\n  /**\n   * Removes a specific listener from the specified registrations.\n   *\n   * @param listener\n   * @param registrations\n   * @return {Array} array of registrations removed\n   */\n  removeListenerRegistrations(listener, registrations) {\n    if (!Array.isArray(registrations)) {\n      return [];\n    }\n    const removed = [];\n\n    for (let i = 0, len = registrations.length; i < len; i++) {\n      const registration = registrations[i];\n      let subscriptions;\n\n      // EventEmitter in react-native < 0.70 had a `_subscriber` property with a method for subscriptions by type...\n      if (SharedEventEmitter._subscriber) {\n        subscriptions = SharedEventEmitter._subscriber.getSubscriptionsForType(registration);\n      } else {\n        // ...react-native 0.70 now stores subscribers as a map of Sets by type in `_registry`\n        const registrySubscriptionsSet = SharedEventEmitter._registry[registration];\n        if (registrySubscriptionsSet) {\n          subscriptions = Array.from(registrySubscriptionsSet);\n        }\n      }\n\n      if (subscriptions) {\n        for (let j = 0, l = subscriptions.length; j < l; j++) {\n          const subscription = subscriptions[j];\n          // The subscription may have been removed during this event loop.\n          // its listener matches the listener in method parameters\n          if (subscription && subscription.listener === listener) {\n            subscription.remove();\n            removed.push(registration);\n            this.removeRegistration(registration);\n          }\n        }\n      }\n    }\n\n    return removed;\n  }\n\n  /**\n   * Returns an array of all registration keys for the specified path.\n   *\n   * @param path\n   * @return {Array}\n   */\n  getRegistrationsByPath(path) {\n    const out = [];\n    const eventKeys = Object.keys(this._tree[path] || {});\n\n    for (let i = 0, len = eventKeys.length; i < len; i++) {\n      Array.prototype.push.apply(out, Object.keys(this._tree[path][eventKeys[i]]));\n    }\n\n    return out;\n  }\n\n  /**\n   * Returns an array of all registration keys for the specified path and eventType.\n   *\n   * @param path\n   * @param eventType\n   * @return {Array}\n   */\n  getRegistrationsByPathEvent(path, eventType) {\n    if (!this._tree[path]) {\n      return [];\n    }\n    if (!this._tree[path][eventType]) {\n      return [];\n    }\n\n    return Object.keys(this._tree[path][eventType]);\n  }\n\n  /**\n   * Returns a single registration key for the specified path, eventType, and listener\n   *\n   * @param path\n   * @param eventType\n   * @param listener\n   * @return {Array}\n   */\n  getOneByPathEventListener(path, eventType, listener) {\n    if (!this._tree[path]) {\n      return null;\n    }\n    if (!this._tree[path][eventType]) {\n      return null;\n    }\n\n    const registrationsForPathEvent = Object.entries(this._tree[path][eventType]);\n\n    for (let i = 0; i < registrationsForPathEvent.length; i++) {\n      const registration = registrationsForPathEvent[i];\n      if (registration[1] === listener) {\n        return registration[0];\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Register a new listener.\n   *\n   * @param registration\n   */\n  addRegistration(registration) {\n    const { eventRegistrationKey, eventType, listener, once, path } = registration;\n\n    if (!this._tree[path]) {\n      this._tree[path] = {};\n    }\n    if (!this._tree[path][eventType]) {\n      this._tree[path][eventType] = {};\n    }\n\n    this._tree[path][eventType][eventRegistrationKey] = listener;\n    this._reverseLookup[eventRegistrationKey] = registration;\n\n    if (once) {\n      const subscription = SharedEventEmitter.addListener(eventRegistrationKey, event => {\n        this._onOnceRemoveRegistration(eventRegistrationKey, listener)(event);\n        subscription.remove();\n      });\n    } else {\n      SharedEventEmitter.addListener(eventRegistrationKey, listener);\n    }\n\n    return eventRegistrationKey;\n  }\n\n  /**\n   * Remove a registration, if it's not a `once` registration then instructs native\n   * to also remove the underlying database query listener.\n   *\n   * @param registration\n   * @return {boolean}\n   */\n  removeRegistration(registration) {\n    if (!this._reverseLookup[registration]) {\n      return false;\n    }\n    const { path, eventType, once } = this._reverseLookup[registration];\n\n    if (!this._tree[path]) {\n      delete this._reverseLookup[registration];\n      return false;\n    }\n\n    if (!this._tree[path][eventType]) {\n      delete this._reverseLookup[registration];\n      return false;\n    }\n\n    // we don't want `once` events to notify native as they're already\n    // automatically unsubscribed on native when the first event is sent\n    const registrationObj = this._reverseLookup[registration];\n    if (registrationObj && !once) {\n      this.native.off(registrationObj.key, registration);\n    }\n\n    delete this._tree[path][eventType][registration];\n    delete this._reverseLookup[registration];\n\n    return !!registrationObj;\n  }\n\n  /**\n   * Wraps a `once` listener with a new function that self de-registers.\n   *\n   * @param registration\n   * @param listener\n   * @return {function(...[*])}\n   * @private\n   */\n  _onOnceRemoveRegistration(registration, listener) {\n    return (...args) => {\n      this.removeRegistration(registration);\n      listener(...args);\n    };\n  }\n}\n\nexport default new DatabaseSyncTree();\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}